{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","services/persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","newFilter","doFiltering","value","onChange","PersonForm","handleSubmit","newName","setNewName","setNewNumber","newNumber","onSubmit","e","target","type","Persons","peopleToShow","handleDelete","map","name","number","id","key","onClick","baseUrl","Notification","message","text","className","App","useState","persons","setPersons","setPeopleToShow","setNewFilter","setmessage","useEffect","axios","get","then","res","data","catch","err","console","log","re","RegExp","match","filter","person","test","length","preventDefault","replacer","newPerson","found","find","window","confirm","put","concat","setTimeout","response","error","post","create","extract","arr","delete","destroy","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.209f8cfa.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Filter = ({ newFilter, doFiltering }) => (\r\n  <div>\r\n    Filter shown with: <input value={newFilter} onChange={doFiltering} />\r\n  </div>\r\n);\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\n\r\nconst PersonForm = ({\r\n  handleSubmit,\r\n  newName,\r\n  setNewName,\r\n  setNewNumber,\r\n  newNumber,\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        name:{\" \"}\r\n        <input value={newName} onChange={(e) => setNewName(e.target.value)} />\r\n      </div>\r\n      <div>\r\n        number:{\" \"}\r\n        <input\r\n          value={newNumber}\r\n          onChange={(e) => setNewNumber(e.target.value)}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PersonForm;\r\n","import React from \"react\";\r\n\r\nconst Persons = ({ peopleToShow, handleDelete }) => {\r\n  return (\r\n    <div>\r\n      {peopleToShow.map(({ name, number, id }) => (\r\n        <p key={id}>\r\n          {name} {number}{\" \"}\r\n          <button onClick={() => handleDelete(id, name)}>delete</button>\r\n        </p>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Persons;\r\n","import axios from \"axios\";\r\n\r\nconst baseUrl = \"/api/persons\";\r\nexport const getAll = () => axios.get(baseUrl).then((res) => res.data);\r\n\r\nexport const create = (newPerson) =>\r\n  axios.post(baseUrl, newPerson).then((res) => res.data);\r\nexport const destroy = (id) => axios.delete(`${baseUrl}/${id}`);\r\nexport const replace = (id, replacer) =>\r\n  axios.put(`${baseUrl}/${id}`, replacer).then((res) => res.data);\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message: { text, type } }) => {\r\n  if (text) {\r\n    return <div className={type}>{text}</div>;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState, useEffect } from \"react\";\nimport Filter from \"./components/Filter\";\nimport PersonForm from \"./components/PersonForm\";\nimport Persons from \"./components/Persons\";\nimport { getAll, create, destroy, replace } from \"./services/persons\";\nimport Notification from \"./components/Notification\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [peopleToShow, setPeopleToShow] = useState([]);\n  const [newFilter, setNewFilter] = useState(\"\");\n  const [message, setmessage] = useState(\"\");\n\n  useEffect(() => {\n    getAll()\n      .then((res) => {\n        setPersons(res);\n        setPeopleToShow(res);\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const newPerson = {\n      name: newName,\n      number: newNumber,\n    };\n    const found = persons.find(({ name }) => name === newName);\n    if (found) {\n      let confirm = window.confirm(\n        `${newName} is already added to phonebook, replace the old number with a new one ?`\n      );\n      return (\n        confirm &&\n        replace(found.id, newPerson)\n          .then((res) => {\n            setPeopleToShow(\n              peopleToShow\n                .filter((person) => person.id !== found.id)\n                .concat(res)\n            );\n            setPersons(\n              persons.filter((person) => person.id !== found.id).concat(res)\n            );\n            setNewName(\"\");\n            setNewNumber(\"\");\n            setmessage({\n              text: \"Number changed successfully !\",\n              type: \"success\",\n            });\n            setTimeout(() => {\n              setmessage(\"\");\n            }, 5000);\n          })\n          .catch((err) => {\n            setmessage({\n              text: err.response.data.error.message,\n              type: \"error\",\n            });\n            setTimeout(() => {\n              setmessage(\"\");\n            }, 5000);\n          })\n      );\n    }\n\n    create(newPerson)\n      .then((res) => {\n        setPeopleToShow(peopleToShow.concat(res));\n        setPersons(persons.concat(res));\n        setNewName(\"\");\n        setNewNumber(\"\");\n        setmessage({ text: \"Number added successfully !\", type: \"success\" });\n        setTimeout(() => {\n          setmessage(\"\");\n        }, 5000);\n      })\n      .catch((err) => {\n        setmessage({\n          text: err.response.data.error.message,\n          type: \"error\",\n        });\n        setTimeout(() => {\n          setmessage(\"\");\n        }, 5000);\n      });\n  };\n  const handleDelete = (id, name) => {\n    const extract = (arr) => arr.filter((person) => person.id !== id);\n    window.confirm(`Delete ${name} ?`) &&\n      destroy(id).then(() => {\n        setPeopleToShow(extract(peopleToShow));\n        setPersons(extract(persons));\n      });\n  };\n\n  const doFiltering = (e) => {\n    setNewFilter(e.target.value);\n    const re = new RegExp(newFilter, \"i\");\n    const match = persons.filter((person) => re.test(person.name));\n    match.length > 0 ? setPeopleToShow(match) : setPeopleToShow(persons);\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <Filter newFilter={newFilter} doFiltering={doFiltering} />\n      <h3>Add a new</h3>\n      <PersonForm\n        handleSubmit={handleSubmit}\n        newName={newName}\n        setNewName={setNewName}\n        setNewNumber={setNewNumber}\n        newNumber={newNumber}\n      />\n      <h3>Numbers</h3>\n      <Persons peopleToShow={peopleToShow} handleDelete={handleDelete} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}